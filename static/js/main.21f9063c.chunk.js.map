{"version":3,"sources":["components/HeaderSection.js","components/Ocean.js","App.js","serviceWorker.js","index.js"],"names":["HeaderSection","react_default","a","createElement","className","this","props","status","score","topScore","Component","Ocean","_this","fish","map","item","key","id","data-id","onClick","handleClick","src","image","alt","message","App","state","data","messages","componentDidMount","setState","shuffleData","sort","b","Math","random","event","target","dataset","checkGuess","resetData","Object","objectSpread","clicked","correctGuess","newData","parseInt","newScore","max","floor","length","react","components_HeaderSection","components_Ocean","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.21f9063c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass HeaderSection extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <header>\r\n        <div className=\"container-fluid\">\r\n          <div className=\"row d-flex align-items-center\">\r\n            <div className=\"col-md-3 title\">\r\n              Fishy Clicky\r\n            </div>\r\n            <div className=\"col-md-6 text-center\">\r\n              {this.props.status}\r\n            </div>\r\n            <div className=\"col-md-3 score\">\r\n              Score: {this.props.score} | Top Score: {this.props.topScore}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HeaderSection;\r\n","import React, { Component } from 'react';\r\n\r\nclass Ocean extends Component {\r\n  render() {\r\n    const fish = this.props.fish.map((item) =>\r\n      <img className=\"thumb img-thumbnail\"\r\n        key={item.id}\r\n        data-id={item.id}\r\n        onClick={this.props.handleClick}\r\n        src={item.image}\r\n        alt={item.id}\r\n      />\r\n    );\r\n\r\n    return (\r\n      <main className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-12 text-center\">\r\n            <h1 className=\"h3 mt-4 mt-md-5 mb-4 mb-md-5 message\">{this.props.message}</h1>\r\n          </div>\r\n        </div>\r\n        <div className=\"row d-flex justify-content-center\">\r\n          <div className=\"image-container col-12 d-flex justify-content-center\">\r\n            {fish}\r\n          </div>\r\n        </div>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Ocean;","import React, { Component, Fragment } from 'react';\nimport './css/App.css';\nimport HeaderSection from './components/HeaderSection';\nimport Ocean from './components/Ocean';\nimport data from \"./data\";\n\nclass App extends Component {\n  state = {\n    data,\n    score: 0,\n    topScore: 0,\n    status: 'Click any fish to begin',\n    message: \"Get as many as you can in a row without clicking the same fish twice!\"\n  }\n\n  messages = [\n    \"Awesome!\",\n    \"Great, you're so close to catching them all!\",\n    \"Lets set a new high score!\",\n    \"Keep on clicking on!\",\n    \"Clicks away!\"\n  ]\n\n  componentDidMount = () => {\n    this.setState({ data: this.shuffleData(this.state.data) });\n  }\n\n  shuffleData = data => {\n    let newData = data.sort(function(a, b){return 0.5 - Math.random()});\n    return newData;\n  };\n\n  handleClick = event => {\n    const id = event.target.dataset.id;\n    this.checkGuess(id);\n  }\n\n  resetData = data => {\n    const resetData = data.map(item => ({ ...item, clicked: false }));\n    return this.shuffleData(resetData);\n  };\n\n  checkGuess = id => {\n    let correctGuess = false;\n    const newData = this.state.data.map(item => {\n      if (item.id === parseInt(id)) {\n        if (!item.clicked) {\n          item.clicked = true;\n          correctGuess = true;\n        }\n      }\n      return item;\n    });\n    if (correctGuess) {\n      let newScore = this.state.score + 1;\n      this.setState(\n        {\n          data: this.shuffleData(newData),\n          score: newScore,\n          topScore: Math.max(newScore, this.state.topScore),\n          message: this.messages[Math.floor(Math.random()*this.messages.length)]\n        }\n      )\n    }\n    else {\n      this.setState(\n        {\n          data: this.resetData(newData),\n          score: 0,\n          message: 'Oh no, you caught the same fish twice! Try again!.'\n        }\n      )\n    }\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <HeaderSection\n          status={this.state.status}\n          score={this.state.score}\n          topScore={this.state.topScore}\n        />\n        <Ocean\n          message={this.state.message}\n          fish={this.state.data}\n          handleClick={this.handleClick}\n        />\n      </Fragment>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}